services:

  redis:
    image: redis
    networks:
      - backend
    restart: on-failure
    expose:
      - "6379"

  db:
    image: postgres
    container_name: db
    restart: on-failure
    networks:
      - backend
    env_file:
      - .env
    expose:
      - "5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "-c", "pg_isready -U $POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    tty: true
    container_name: app
    networks:
      - backend
      - frontend
    env_file:
      - .env
    ports:
      - "8000:8000"
    command:
      gunicorn config.wsgi:application --bind 0.0.0.0:8000
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media

  celery:
    build: .
    tty: true
    networks:
      - backend
    env_file:
      - .env
    restart: on-failure
    command:
      celery -A config worker -l INFO -S django -P eventlet
    depends_on:
      - db
      - redis
      - web
    volumes:
      - .:/home/app/web/

  celery-beat:
    build: .
    tty: true
    networks:
      - backend
    env_file:
      - .env
    restart: on-failure
    command:
            celery -A config beat -l INFO -S django
    depends_on:
      - db
      - redis
      - web
    volumes:
      - .:/home/app/web/

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true

volumes:
  pg_data:
  static_volume:
  media_volume: